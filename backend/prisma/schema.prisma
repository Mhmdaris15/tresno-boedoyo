// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  VOLUNTEER
  COORDINATOR
  ADMIN
}

enum OpportunityStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(VOLUNTEER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  volunteer           Volunteer?
  coordinator         Coordinator?
  generatedBatiks     GeneratedBatik[]
  batikGallery        BatikGallery[]
  batikLikes          BatikLike[]
  batikComments       BatikComment[]
  batikCollections    BatikCollection[]
  generationLimit     UserGenerationLimit?
  siteReports         SiteReport[]
  siteReviews         SiteReview[]

  @@map("users")
}

model Volunteer {
  id                String   @id @default(cuid())
  userId            String   @unique
  firstName         String
  lastName          String
  phone             String?
  dateOfBirth       DateTime?
  nationality       String?
  languages         String[] // JSON array of languages
  bio               String?
  profilePicture    String?
  walletAddress     String?
  totalHours        Float    @default(0)
  totalOpportunities Int     @default(0)
  rating            Float?
  isAvailable       Boolean  @default(true)
  joinedAt          DateTime @default(now())
  lastActiveAt      DateTime @default(now())

  // Relations
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills       VolunteerSkill[]
  interests    VolunteerInterest[]
  availability VolunteerAvailability[]
  applications Application[]
  achievements Achievement[]

  @@map("volunteers")
}

model Coordinator {
  id           String  @id @default(cuid())
  userId       String  @unique
  firstName    String
  lastName     String
  phone        String?
  department   String?
  bio          String?
  
  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunities Opportunity[]

  @@map("coordinators")
}

model Skill {
  id          String @id @default(cuid())
  name        String @unique
  category    String
  description String?

  // Relations
  volunteerSkills    VolunteerSkill[]
  opportunitySkills  OpportunitySkill[]

  @@map("skills")
}

model VolunteerSkill {
  id          String     @id @default(cuid())
  volunteerId String
  skillId     String
  level       SkillLevel @default(BEGINNER)
  experience  String?    // Years of experience or description

  // Relations
  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([volunteerId, skillId])
  @@map("volunteer_skills")
}

model Interest {
  id          String @id @default(cuid())
  name        String @unique
  category    String
  description String?

  // Relations
  volunteerInterests VolunteerInterest[]

  @@map("interests")
}

model VolunteerInterest {
  id          String @id @default(cuid())
  volunteerId String
  interestId  String

  // Relations
  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  interest  Interest  @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@unique([volunteerId, interestId])
  @@map("volunteer_interests")
}

model VolunteerAvailability {
  id          String   @id @default(cuid())
  volunteerId String
  dayOfWeek   Int      // 0-6 (Sunday to Saturday)
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  timezone    String   @default("Asia/Jakarta")

  // Relations
  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  @@map("volunteer_availability")
}

model Opportunity {
  id             String            @id @default(cuid())
  coordinatorId  String
  title          String
  description    String
  location       String
  heritageSiteId String?           // Optional relation to heritage site
  dateTime       DateTime
  duration       Int               // Duration in hours
  maxVolunteers  Int               @default(1)
  status         OpportunityStatus @default(DRAFT)
  impactStatement String?
  requirements   String?
  benefits       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  coordinator  Coordinator        @relation(fields: [coordinatorId], references: [id])
  heritageSite HeritageSite?      @relation(fields: [heritageSiteId], references: [id])
  skills       OpportunitySkill[]
  applications Application[]

  @@map("opportunities")
}

model OpportunitySkill {
  id            String     @id @default(cuid())
  opportunityId String
  skillId       String
  required      Boolean    @default(true)
  level         SkillLevel @default(BEGINNER)

  // Relations
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  skill       Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([opportunityId, skillId])
  @@map("opportunity_skills")
}

model Application {
  id            String            @id @default(cuid())
  volunteerId   String
  opportunityId String
  status        ApplicationStatus @default(PENDING)
  message       String?
  feedback      String?
  appliedAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  completedAt   DateTime?

  // Relations
  volunteer   Volunteer   @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@unique([volunteerId, opportunityId])
  @@map("applications")
}

model Achievement {
  id          String   @id @default(cuid())
  volunteerId String
  type        String   // e.g., "HOURS_MILESTONE", "OPPORTUNITY_COUNT", "SPECIAL_RECOGNITION"
  title       String
  description String
  tokenId     String?  // Blockchain token ID
  imageUrl    String?
  earnedAt    DateTime @default(now())

  // Relations
  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model MatchingSession {
  id            String   @id @default(cuid())
  opportunityId String
  aiPrompt      String
  aiResponse    String
  matchedVolunteers String[] // Array of volunteer IDs
  createdAt     DateTime @default(now())

  @@map("matching_sessions")
}

model GeneratedBatik {
  id              String   @id @default(cuid())
  userId          String
  prompt          String   @db.Text
  originalPrompt  String   @db.Text
  motif           String
  style           String
  colors          String[] // Array of hex color codes
  region          String
  complexity      String
  imageUrl        String
  imageBase64     String?  @db.Text
  inGallery       Boolean  @default(false)
  isPublic        Boolean  @default(false)
  downloadCount   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  galleryEntries     BatikGallery[]
  collectionItems    BatikCollectionItem[]

  @@map("generated_batiks")
}

model BatikGallery {
  id        String   @id @default(cuid())
  userId    String
  batikId   String
  title     String?
  description String?
  tags      String[]
  likes     Int      @default(0)
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  batik     GeneratedBatik @relation(fields: [batikId], references: [id], onDelete: Cascade)
  likes_received BatikLike[]
  comments  BatikComment[]

  @@unique([userId, batikId])
  @@map("batik_gallery")
}

model BatikLike {
  id        String   @id @default(cuid())
  userId    String
  galleryId String
  createdAt DateTime @default(now())

  // Relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  gallery   BatikGallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@unique([userId, galleryId])
  @@map("batik_likes")
}

model BatikComment {
  id        String   @id @default(cuid())
  userId    String
  galleryId String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  gallery   BatikGallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@map("batik_comments")
}

model BatikCollection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       BatikCollectionItem[]

  @@map("batik_collections")
}

model BatikCollectionItem {
  id           String   @id @default(cuid())
  collectionId String
  batikId      String
  addedAt      DateTime @default(now())

  // Relations
  collection   BatikCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  batik        GeneratedBatik  @relation(fields: [batikId], references: [id], onDelete: Cascade)

  @@unique([collectionId, batikId])
  @@map("batik_collection_items")
}

model UserGenerationLimit {
  id              String   @id @default(cuid())
  userId          String   @unique
  monthlyLimit    Int      @default(5)
  currentCount    Int      @default(0)
  lastResetDate   DateTime @default(now())
  totalGenerated  Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_generation_limits")
}

// Heritage Sites Models
model HeritageSite {
  id              String   @id @default(cuid())
  name            String
  description     String   @db.Text
  type            HeritageSiteType
  category        String   // Temple, Palace, Traditional Village, etc.
  location        String
  address         String?
  latitude        Float
  longitude       Float
  province        String
  city            String
  establishedDate DateTime?
  unescoStatus    Boolean  @default(false)
  culturalValue   String?  @db.Text
  historicalPeriod String?
  architecture    String?
  significance    String?  @db.Text
  
  // Media
  images          String[] // Array of image URLs
  virtualTourUrl  String?
  officialWebsite String?
  
  // Visitor Information
  openingHours    String?
  entryFee        String?
  bestTimeToVisit String?
  accessibility   String?
  facilities      String[]
  
  // Preservation Status
  conservationStatus ConservationStatus @default(GOOD)
  threatLevel        ThreatLevel        @default(LOW)
  lastAssessment     DateTime?
  
  // Relations
  opportunities   Opportunity[]
  siteReports     SiteReport[]
  siteReviews     SiteReview[]
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("heritage_sites")
}

enum HeritageSiteType {
  TEMPLE
  PALACE
  TRADITIONAL_VILLAGE
  ARCHAEOLOGICAL_SITE
  CULTURAL_LANDSCAPE
  MONUMENT
  MUSEUM
  TRADITIONAL_HOUSE
  SACRED_SITE
  CULTURAL_CENTER
}

enum ConservationStatus {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
}

enum ThreatLevel {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

model SiteReport {
  id              String       @id @default(cuid())
  siteId          String
  reporterId      String
  reportType      ReportType
  description     String       @db.Text
  urgency         UrgencyLevel @default(LOW)
  images          String[]
  latitude        Float?
  longitude       Float?
  status          String       @default("PENDING")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  site            HeritageSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  reporter        User         @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  
  @@map("site_reports")
}

enum ReportType {
  DAMAGE
  VANDALISM
  NATURAL_DETERIORATION
  IMPROVEMENT_NEEDED
  POSITIVE_OBSERVATION
  SAFETY_CONCERN
}

enum UrgencyLevel {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

model SiteReview {
  id              String   @id @default(cuid())
  siteId          String
  reviewerId      String
  rating          Int      // 1-5 stars
  comment         String?  @db.Text
  visitDate       DateTime?
  images          String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  site            HeritageSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  reviewer        User         @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  
  @@unique([siteId, reviewerId])
  @@map("site_reviews")
}
