version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ihs-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ihs-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ihs-redis-prod
    networks:
      - ihs-network
    restart: unless-stopped

  # Backend Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: ihs-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      WEB3_SERVICE_URL: http://web3-service:3003
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - ihs-network
    restart: unless-stopped

  # Web3 Service
  web3-service:
    build: 
      context: ./web3-service
      dockerfile: Dockerfile.prod
    container_name: ihs-web3-prod
    environment:
      NODE_ENV: production
      PRIVATE_KEY: ${PRIVATE_KEY}
      POLYGON_RPC_URL: ${POLYGON_RPC_URL}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
      THIRDWEB_SECRET_KEY: ${THIRDWEB_SECRET_KEY}
      BACKEND_SERVICE_URL: http://backend:3001
    ports:
      - "3003:3003"
    networks:
      - ihs-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ihs-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - web3-service
    networks:
      - ihs-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  ihs-network:
    driver: bridge
